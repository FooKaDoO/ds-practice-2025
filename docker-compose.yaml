
services:
  frontend:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 80 of the container to port 8080 on the host
      # Access the application at http://localhost:8080
      - "8080:80"
    volumes:
      # Mount the frontend directory
      - ./frontend/src:/usr/share/nginx/html
  orchestrator:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile
    depends_on:
      logger:
        condition: service_started
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app.py
      - BOOKS_DB_PRIMARY=books_0:50070
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the orchestrator/src directory in the current directory to the /app/orchestrator/src directory in the container
      - ./orchestrator/src:/app/orchestrator/src
  fraud_detection:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./fraud_detection/Dockerfile
    depends_on:
      logger:
        condition: service_started
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50051:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/fraud_detection/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./fraud_detection/src:/app/fraud_detection/src
      - ./fraud_detection/model:/app/fraud_detection/model

  transaction_verification:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the transaction_verification directorys
      dockerfile: ./transaction_verification/Dockerfile
    depends_on:
      logger:
        condition: service_started
    ports:
      # Expose port 50052 on the host, and map port 50052 of the container to port 50051 on the host
      - 50052:50052
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the transaction_verification directory to see how this is used
      - PYTHONFILE=/app/transaction_verification/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the transaction_verification/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./transaction_verification/src:/app/transaction_verification/src

  order_queue:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the order_queue directorys
      dockerfile: ./order_queue/Dockerfile
    depends_on:
      logger:
        condition: service_started
    ports:
      # Expose port 50055 on the host, and map port 50055 of the container to port 50055 on the host
      - 50055:50055
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the order_queue directory to see how this is used
      - PYTHONFILE=/app/order_queue/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the order_queue/src directory in the current directory to the /app/order_queue/src directory in the container
      - ./order_queue/src:/app/order_queue/src
  suggestions:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the suggestions directorys
      dockerfile: ./suggestions/Dockerfile
    depends_on:
      logger:
        condition: service_started
    ports:
      # Expose port 50053 on the host, and map port 50053 of the container to port 50051 on the host
      - 50053:50053
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the suggestions directory to see how this is used
      - PYTHONFILE=/app/suggestions/src/app.py
      - COHERE_API_KEY=TMGoKVy7oc0uu5xmPjUMoeYmjeRuEn4w3gnTRIaD
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the suggestions/src directory in the current directory to the /app/suggestions/src directory in the container
      - ./suggestions/src:/app/suggestions/src
  logger:
    build:
      context: ./
      dockerfile: ./logger/Dockerfile
    ports:
      - 50054:50054
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/logger/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./logger/src:/app/logger/src
      - ./logs:/app/logger/src/logs
  order_executor_0:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the order_executor directorys
      dockerfile: ./order_executor/Dockerfile
    depends_on:
      logger:
        condition: service_started
    ports:
      # Expose port 50056 on the host, and map port 50056 of the container to port 50056 on the host
      - 50056:50056
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      - REPLICA_ID=0   # For the first instance; then create another with PYREPLICA_ID=1
      - KNOWN_EXECUTORS=order_executor_0:50056,order_executor_1:50056
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the order_executor directory to see how this is used
      - PYTHONFILE=/app/order_executor/src/app.py
      - BOOKS_DB_PRIMARY=books_0:50070
      - PAYMENT_SERVICE=payment:50075
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the order_executor/src directory in the current directory to the /app/order_executor/src directory in the container
      - ./order_executor/src:/app/order_executor/src
  order_executor_1:
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    depends_on:
      logger:
        condition: service_started
    ports:
      - 50057:50056
    environment:
      - PYTHONUNBUFFERED=TRUE
      - REPLICA_ID=1
      - KNOWN_EXECUTORS=order_executor_0:50056,order_executor_1:50056
      - PYTHONFILE=/app/order_executor/src/app.py
      - BOOKS_DB_PRIMARY=books_0:50070
      - PAYMENT_SERVICE=payments:50075
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src

  books_0:
    build:
      context: ./
      dockerfile: ./books/Dockerfile
    depends_on:
      logger:
        condition: service_started
    ports:
      - "50070:50070"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - REPLICA_ID=0
      - INITIAL_STOCK_FILE=initial_stock.json
      - BACKUP_ADDRS=books_1:50070,books_2:50070
      - PYTHONFILE=/app/books/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./books/src:/app/books/src
      - ./books/src/initial_stock.json:/app/books/src/initial_stock.json

  books_1:
    build:
      context: ./
      dockerfile: ./books/Dockerfile
    depends_on:
      logger:
        condition: service_started
    ports:
      - "50071:50070"   # map host 50071 → container 50070
    environment:
      - PYTHONUNBUFFERED=TRUE
      - REPLICA_ID=1
      - INITIAL_STOCK_FILE=initial_stock.json
      - BACKUP_ADDRS=books_0:50070,books_2:50070
      - PYTHONFILE=/app/books/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./books/src:/app/books/src
      - ./books/src/initial_stock.json:/app/books/src/initial_stock.json

  books_2:
    build:
      context: ./
      dockerfile: ./books/Dockerfile
    depends_on:
      logger:
        condition: service_started
    ports:
      - "50072:50070"   # map host 50072 → container 50070
    environment:
      - PYTHONUNBUFFERED=TRUE
      - REPLICA_ID=2
      - INITIAL_STOCK_FILE=initial_stock.json
      - BACKUP_ADDRS=books_0:50070,books_1:50070
      - PYTHONFILE=/app/books/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./books/src:/app/books/src
      - ./books/src/initial_stock.json:/app/books/src/initial_stock.json

  
  payments:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the payments directorys
      dockerfile: ./payments/Dockerfile
    depends_on:
      logger:
        condition: service_started
    ports:
      # Expose port 50075 on the host, and map port 50075 of the container to port 50051 on the host
      - 50075:50075
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the payments directory to see how this is used
      - PYTHONFILE=/app/payments/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the payments/src directory in the current directory to the /app/payments/src directory in the container
      - ./payments/src:/app/payments/src
